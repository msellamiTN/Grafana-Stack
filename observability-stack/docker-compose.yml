version: '3.8'

services:
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules/:/etc/prometheus/rules/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--storage.tsdb.retention.time=30d'
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  # Grafana - Visualization
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=GrafanaSecure123!Change@Me
      - GF_SECURITY_SECRET_KEY=GrafanaSecret123!Change@Me
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_SECURITY_COOKIE_SAMESITE=lax
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      - GF_DATABASE_TYPE=sqlite3
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_PATHS_LOGS=/var/log/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_config:/etc/grafana
      - grafana_provisioning:/etc/grafana/provisioning
    user: "472:472"
    security_opt:
      - no-new-privileges:true
    depends_on:
      - prometheus
    networks:
      - observability

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  # Promtail - Log Collector
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log
      - ./promtail:/etc/promtail
    command: -config.file=/etc/promtail/promtail-config.yaml
    security_opt:
      - no-new-privileges:true
    depends_on:
      - loki
    networks:
      - observability

  # eBanking Metrics Exporter
  ebanking_metrics_exporter:
    build: ./ebanking-exporter
    container_name: ebanking_metrics_exporter
    restart: unless-stopped
    ports:
      - "9201:9200"  # Changed from 9200 to 9201 to avoid conflict
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  # Node Exporter
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
    pid: host
    volumes:
      - '/:/host:ro,rslave'
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  # PostgreSQL (for Grafana)
  postgres:
    image: postgres:13-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-grafana}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-grafana}
      - POSTGRES_DB=${POSTGRES_DB:-grafana}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  # MinIO for file storage
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-MinioSecure123!Change@Me}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  # InfluxDB - Time Series Database
  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USER:-admin}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD:-InfluxSecure123!Change@Me}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG:-myorg}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET:-mybucket}
      - DOCKER_INFLUXDB_INIT_RETENTION=1w
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN:-my-super-secret-auth-token}
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - observability

  # Payment API Mock
  payment-api:
    build: 
      context: ./payment-api-mock
      dockerfile: Dockerfile
    container_name: payment-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - PROMETHEUS_METRICS_ENABLED=true
      - SIMULATION_RATE=5  # Transactions per second
    depends_on:
      - prometheus
    networks:
      - observability

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-MySQLRoot123!Change@Me}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-observability}
      - MYSQL_USER=${MYSQL_USER:-appuser}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-MySQLApp123!Change@Me}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/initdb.d:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      timeout: 5s
      retries: 10
    networks:
      - observability

networks:
  observability:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  grafana_config:
  grafana_provisioning:
  loki_data:
  alertmanager_data:
  postgres_data:
  minio_data:
  influxdb_data:
  mysql_data:
