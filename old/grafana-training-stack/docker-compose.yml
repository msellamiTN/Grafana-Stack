version: '3.9'

# ============================================
# Grafana Training Stack - Production Ready
# Data2AI Academy
# ============================================

networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  tempo_data:
    driver: local
  influxdb_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  alertmanager_data:
    driver: local
  minio_data:
    driver: local
  mssql_data:
    driver: local

services:
  # ============================================
  # Grafana - Visualization Platform
  # ============================================
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana-training
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      # Security
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-SW2YcwTIb9zpOOhoPsMm}
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_SECURITY_COOKIE_SAMESITE=lax
      - GF_SECURITY_ALLOW_EMBEDDING=false
      
      # Authentication
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_AUTH_DISABLE_SIGNOUT_MENU=false
      
      # Users
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=true
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      
      # Server
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      - GF_SERVER_ENABLE_GZIP=true
      
      # Database (PostgreSQL)
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=${POSTGRES_DB:-grafana}
      - GF_DATABASE_USER=${POSTGRES_USER:-grafana}
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD:-grafana123}
      - GF_DATABASE_SSL_MODE=disable
      
      # Session (Redis)
      - GF_SESSION_PROVIDER=redis
      - GF_SESSION_PROVIDER_CONFIG=addr=redis:6379,pool_size=100,db=0
      
      # Paths
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_PATHS_LOGS=/var/log/grafana
      - GF_PATHS_PLUGINS=/var/lib/grafana/plugins
      
      # Logging
      - GF_LOG_MODE=console file
      - GF_LOG_LEVEL=info
      
      # Metrics
      - GF_METRICS_ENABLED=true
      - GF_METRICS_DISABLE_TOTAL_STATS=false
      
      # Alerting
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=true
      
      # Feature Toggles
      - GF_FEATURE_TOGGLES_ENABLE=tempoSearch,tempoBackendSearch
      
      # Timezone
      - TZ=UTC
      
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - postgres
      - redis
      - prometheus
      - loki
      - tempo
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.data2ai.service=grafana"
      - "com.data2ai.training=true"

  # ============================================
  # PostgreSQL - Grafana Backend Database
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: postgres-grafana
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-grafana}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-grafana123}
      - POSTGRES_DB=${POSTGRES_DB:-grafana}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-grafana}"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.data2ai.service=postgres"

  # ============================================
  # Redis - Session Storage & Caching
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: redis-grafana
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    labels:
      - "com.data2ai.service=redis"

  # ============================================
  # Prometheus - Metrics Collection
  # ============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-training
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.data2ai.service=prometheus"

  # ============================================
  # Loki - Log Aggregation
  # ============================================
  loki:
    image: grafana/loki:latest
    container_name: loki-training
    restart: unless-stopped
    ports:
      - "${LOKI_PORT:-3100}:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - loki_data:/loki
      - ./loki/loki-config.yaml:/etc/loki/loki-config.yaml:ro
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.data2ai.service=loki"

  # ============================================
  # Promtail - Log Collector for Loki
  # ============================================
  promtail:
    image: grafana/promtail:latest
    container_name: promtail-training
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml:ro
    command: -config.file=/etc/promtail/promtail-config.yaml
    depends_on:
      - loki
    networks:
      - monitoring
    labels:
      - "com.data2ai.service=promtail"

  # ============================================
  # Tempo - Distributed Tracing
  # ============================================
  tempo:
    image: grafana/tempo:latest
    container_name: tempo-training
    restart: unless-stopped
    ports:
      - "${TEMPO_PORT:-3200}:3200"   # Tempo HTTP
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    command: -config.file=/etc/tempo/tempo-config.yaml
    volumes:
      - tempo_data:/tmp/tempo
      - ./tempo/tempo-config.yaml:/etc/tempo/tempo-config.yaml:ro
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3200/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.data2ai.service=tempo"

  # ============================================
  # InfluxDB - Time-Series Database
  # ============================================
  influxdb:
    image: influxdb:2.7
    container_name: influxdb-training
    restart: unless-stopped
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USER:-admin}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD:-admin123}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG:-data2ai}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET:-training}
      - DOCKER_INFLUXDB_INIT_RETENTION=${INFLUXDB_RETENTION:-30d}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN:-training-token-change-me}
      - INFLUXDB_USER=${INFLUXDB_USER:-admin}
      - INFLUXDB_PASSWORD=${INFLUXDB_PASSWORD:-admin123}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-data2ai}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN:-training-token-change-me}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - ./influxdb/init-influxdb.sh:/docker-entrypoint-initdb.d/init-influxdb.sh:ro
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.data2ai.service=influxdb"

  # ============================================
  # Alertmanager - Alert Management
  # ============================================
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager-training
    restart: unless-stopped
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - alertmanager_data:/alertmanager
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.data2ai.service=alertmanager"

  # ============================================
  # Node Exporter - System Metrics
  # ============================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-training
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro,rslave
    networks:
      - monitoring
    labels:
      - "com.data2ai.service=node-exporter"

  # ============================================
  # cAdvisor - Container Metrics
  # ============================================  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor-training
    restart: unless-stopped
    privileged: true
    ports:
      - "${CADVISOR_PORT:-8080}:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    networks:
      - monitoring
    labels:
      - "com.data2ai.service=cadvisor"

  # ============================================
  # eBanking Metrics Exporter - Training Application
  # ============================================
  ebanking-exporter:
    build:
      context: ./ebanking-exporter
      dockerfile: Dockerfile
    container_name: ebanking-exporter
    restart: unless-stopped
    ports:
      - "${EBANKING_EXPORTER_PORT:-9200}:9200"
    environment:
      - TZ=UTC
      - ENVIRONMENT=${ENVIRONMENT:-training}
      - SERVICE_NAME=ebanking-api
      - REGION=${REGION:-eu-west-1}
      - CLUSTER=${CLUSTER:-training-cluster}
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9200/metrics || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.data2ai.service=ebanking-exporter"
      - "com.data2ai.training=true"
      - "com.data2ai.environment=${ENVIRONMENT:-training}"

  # ============================================
  # MinIO - Object Storage (Optional)
  # ============================================
  minio:
    image: minio/minio:latest
    container_name: minio-training
    restart: unless-stopped
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin123}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.data2ai.service=minio"

  # ============================================
  # Payment API - Mock Payment Service
  # ============================================
  payment-api:
    build:
      context: ./payment-api
      dockerfile: Dockerfile
    container_name: payment-api-training
    restart: unless-stopped
    ports:
      - "${PAYMENT_API_PORT:-8081}:8080"
    environment:
      - PORT=8080
      - SIMULATION_RATE=${PAYMENT_SIMULATION_RATE:-5}
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN:-training-token-change-me}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-data2ai}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-training}
      - NODE_ENV=production
      - ENABLE_SIMULATION=true
      - TZ=UTC
    depends_on:
      - influxdb
      - prometheus
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    labels:
      - "com.data2ai.service=payment-api"
      - "com.data2ai.training=true"

  # ============================================
  # MS SQL Server - E-Banking Database
  # ============================================
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql-ebanking-training
    restart: unless-stopped
    ports:
      - "${MSSQL_PORT:-1433}:1433"
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD:-EBanking@Secure123!}
      - MSSQL_PID=Developer
      - MSSQL_AGENT_ENABLED=true
      - MSSQL_COLLATION=SQL_Latin1_General_CP1_CI_AS
      - TZ=UTC
    volumes:
      - mssql_data:/var/opt/mssql
      - ./mssql/init:/docker-entrypoint-initdb.d
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P $${MSSQL_SA_PASSWORD} -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    labels:
      - "com.data2ai.service=mssql"
      - "com.data2ai.training=true"
      - "com.data2ai.database=ebanking"
